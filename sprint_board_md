---

### ? Goal: Clean Code Refactoring & ML Model Switching

This sprint includes two major user stories. The first focuses on refactoring the backend to follow clean code and SOLID principles. The second adds dynamic switching between multiple machine learning models for prediction.

---

###  Story 1: Refactor Backend for Clean Code & SOLID Principles

**As a developer**, I want the backend Python code to adhere to best practices (e.g., Clean Code, Design Principles, SOLID), so that current and new developers can better read the codebase and easily make changes.

####  Acceptance Criteria & Tasks:

| Task | Description | Definition of Done | Assigned Team Member |
|------|-------------|---------------------|----------------------|
| Integrate Automated Code Validation Tools | Setup automated code checks for quality assurance. | Runs black, pylint, mypy on every PR and fails on violations. | Junkai Zhang |
| Configure Linters & Formatters | Add formatters and linters to project setup. | Tools configured in pyproject.toml, working locally and in CI. | Junkai Zhang |
| Create Config Files | Provide shared config files for tooling and environment. | .pylintrc, .env, pyproject.toml exist and are used by tools. | Junkai Zhang |
| Refactor ClientService | Refactor backend into modular structure. | Code split into Query/Mutation/Service with SRP (single responsibility). | Jianchang Li |
| Refactor Router | Update router to use new service class structure. | Old references removed, router uses services. | Jianchang Li |
| Add Unit Tests | Add tests for backend modules and services. | Tests added, passing in CI, covering key logic. | Jianchang Li |
| Validate Codebase | Format and lint codebase to ensure code quality. | No too much mypy errors; formatted with black. | Jianchang Li |

---

###  Story 2: Support Multiple ML Models and Switching API

**As a user**, I want to switch between different Machine Learning models so I can compare output results for accuracy and precision.

####  Acceptance Criteria & Tasks:

| Task | Description | Definition of Done | Assigned Team Member |
|------|-------------|---------------------|----------------------|
| Train and Save Multiple Models | Train different models and persist them. | Models trained, saved, and reusable. | Kefan Zhou |
| Implement Multi-Model Loading and Switching Logic | Support loading and registering multiple models. | Model loader handles multiple models; registry works as expected. | Kefan Zhou |
| Design Available Models List API | Create API to list all available models. | API returns model list; validated via tests. | Xiaotian Zhang |
| Design Current Model Query API | Create API to get the current selected model. | API returns correct model info; tested and documented. | Xiaotian Zhang |
| Design Model Switching API | Build API to switch between models. | Switching works; persisted across sessions; test added. | Xiaotian Zhang |
| Implement Prediction API | Build prediction API using current model. | API returns prediction; tested with sample input. | Xiaotian Zhang |
| Update Documentation for New Endpoints | Document all new model-related APIs. | README or docs updated; includes usage examples. | Xiaotian Zhang |
